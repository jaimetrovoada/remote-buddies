// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO "Location" (coords)
VALUES (ST_Point($1, $2, 4326))
RETURNING id, coords
`

type CreateLocationParams struct {
	StPoint   interface{} `json:"st_point"`
	StPoint_2 interface{} `json:"st_point_2"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRow(ctx, createLocation, arg.StPoint, arg.StPoint_2)
	var i Location
	err := row.Scan(&i.ID, &i.Coords)
	return i, err
}

const listLocations = `-- name: ListLocations :many
SELECT id, st_astext(coords) as coords
FROM "Location"
WHERE ST_DWithin(coords, ST_MakePoint($1, $2)::geography, 100)
`

type ListLocationsParams struct {
	StMakepoint   interface{} `json:"st_makepoint"`
	StMakepoint_2 interface{} `json:"st_makepoint_2"`
}

type ListLocationsRow struct {
	ID     pgtype.UUID `json:"id"`
	Coords interface{} `json:"coords"`
}

func (q *Queries) ListLocations(ctx context.Context, arg ListLocationsParams) ([]ListLocationsRow, error) {
	rows, err := q.db.Query(ctx, listLocations, arg.StMakepoint, arg.StMakepoint_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLocationsRow
	for rows.Next() {
		var i ListLocationsRow
		if err := rows.Scan(&i.ID, &i.Coords); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
