// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "Account" ("userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "token_type", "scope")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, "userId", type, provider, "providerAccountId", refresh_token, access_token, expires_at, token_type, scope, id_token, session_state, oauth_token_secret, oauth_token
`

type CreateAccountParams struct {
	UserId            string      `json:"userId"`
	Type              string      `json:"type"`
	Provider          string      `json:"provider"`
	ProviderAccountId string      `json:"providerAccountId"`
	RefreshToken      pgtype.Text `json:"refresh_token"`
	AccessToken       pgtype.Text `json:"access_token"`
	TokenType         pgtype.Text `json:"token_type"`
	Scope             pgtype.Text `json:"scope"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.UserId,
		arg.Type,
		arg.Provider,
		arg.ProviderAccountId,
		arg.RefreshToken,
		arg.AccessToken,
		arg.TokenType,
		arg.Scope,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.Type,
		&i.Provider,
		&i.ProviderAccountId,
		&i.RefreshToken,
		&i.AccessToken,
		&i.ExpiresAt,
		&i.TokenType,
		&i.Scope,
		&i.IDToken,
		&i.SessionState,
		&i.OauthTokenSecret,
		&i.OauthToken,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "User" ("name", "email", "image", "updated_at")
VALUES ($1, $2, $3, $4)
RETURNING id, name, email, "emailVerified", image, created_at, updated_at, coords
`

type CreateUserParams struct {
	Name      pgtype.Text        `json:"name"`
	Email     pgtype.Text        `json:"email"`
	Image     pgtype.Text        `json:"image"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Image,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Coords,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, "emailVerified", image, created_at, updated_at, coords FROM "User" WHERE email = $1
`

// USER QUERIES
func (q *Queries) GetUser(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Coords,
	)
	return i, err
}

const listNearbyUsers = `-- name: ListNearbyUsers :many
SELECT name, st_astext(coords) as coords
FROM "User"
WHERE ST_DWithin(coords, ST_MakePoint($1, $2)::geography, $3)
`

type ListNearbyUsersParams struct {
	StMakepoint   interface{} `json:"st_makepoint"`
	StMakepoint_2 interface{} `json:"st_makepoint_2"`
	StDwithin     interface{} `json:"st_dwithin"`
}

type ListNearbyUsersRow struct {
	Name   pgtype.Text `json:"name"`
	Coords interface{} `json:"coords"`
}

func (q *Queries) ListNearbyUsers(ctx context.Context, arg ListNearbyUsersParams) ([]ListNearbyUsersRow, error) {
	rows, err := q.db.Query(ctx, listNearbyUsers, arg.StMakepoint, arg.StMakepoint_2, arg.StDwithin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListNearbyUsersRow
	for rows.Next() {
		var i ListNearbyUsersRow
		if err := rows.Scan(&i.Name, &i.Coords); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserLocation = `-- name: UpdateUserLocation :exec
UPDATE "User"
SET coords = ST_Point($1, $2, 4326)
WHERE email = $3
`

type UpdateUserLocationParams struct {
	StPoint   interface{} `json:"st_point"`
	StPoint_2 interface{} `json:"st_point_2"`
	Email     pgtype.Text `json:"email"`
}

func (q *Queries) UpdateUserLocation(ctx context.Context, arg UpdateUserLocationParams) error {
	_, err := q.db.Exec(ctx, updateUserLocation, arg.StPoint, arg.StPoint_2, arg.Email)
	return err
}
